<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Xcode on Flying blind - coding nonsense</title><link>https://kicsipixel.github.io/tags/Xcode/</link><description>Recent content in Xcode on Flying blind - coding nonsense</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 20 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://kicsipixel.github.io/tags/Xcode/index.xml" rel="self" type="application/rss+xml"/><item><title>PaintCode on macOS with Swift</title><link>https://kicsipixel.github.io/posts/2022/2022-03-20-paintcode-swift/</link><pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2022/2022-03-20-paintcode-swift/</guid><description>I already wrote about PaintCode in this post. I think this is one of the most usefull tool, if you want to convert complex vector graphics to Swift of ObjC code.
This time I will show you how to use PaintCode without Storyboard. I will add the Figma file and PaintCode file to GitHub repository. The code itself is very simple.
Step 1. Create a new macOS app in Xcode. Step 2.</description></item><item><title>Text and styles in an Xcode project</title><link>https://kicsipixel.github.io/posts/2021/2021-12-19-text-post/</link><pubDate>Sun, 19 Dec 2021 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2021/2021-12-19-text-post/</guid><description>Using ViewModifier in SwiftUI allows us to use to apply the same styles on different elements wihtout repeating ourselves (DRY). Most importantly if you need to change anything it is enough to modify it once.
Usually we write style Text in the following way:
Text(&amp;#34;Header&amp;#34;) .font(.largeTitle.bold()) .foregroundColor(Color.accentColor) If we want to apply it again, we need to retype&amp;hellip; Instead the better idea to use ViewModifier.
struct Header: ViewModifier { func body(content: Content) -&amp;gt; some View { content .</description></item><item><title>SwiftUI Preview</title><link>https://kicsipixel.github.io/posts/2021/2021-12-17-preview-post/</link><pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2021/2021-12-17-preview-post/</guid><description>Preview in SwiftUI speeds up the development process as we don&amp;rsquo;t need to build and run our application every time we make some changes. Here are some tips how I use the Preview function.
Light and dark mode side-by-side Change your code this way:
struct ContentView_Previews: PreviewProvider { static var previews: some View { Group { ContentView() .preferredColorScheme(.light) ContentView() .preferredColorScheme(.dark) } } } Focus on important part not the whole screen Add this:</description></item><item><title>Handling colors in SwiftUI easily</title><link>https://kicsipixel.github.io/posts/2021/2021-12-16-colors-post/</link><pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2021/2021-12-16-colors-post/</guid><description>Since Dark mode was introduced in iOS, the easiest was to define colors in Xcode/Assets. This way our app will change the colors automatically.
I have these three colors for my project: Define them in Assets: Using AccentColor is easy, you need to type only:
.foregroundColor(Color.accentColor) but for pastelGreen, you need to type:
.foregroundColor(Color(&amp;#34;pastelGreen&amp;#34;)) What if there is an eaier way and you can use your owned defined colors as SwiftUI built-in Color.</description></item><item><title>NSTabView controlled by NSSegmentedControl</title><link>https://kicsipixel.github.io/posts/2018/2018-11-19-nstabview/</link><pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2018/2018-11-19-nstabview/</guid><description>Recently I found two very interesting articles about NSToolbar and NSSegmentedControl. One was written by Christian Tietze and the other by sanjeetsuhag.
During creating one of my projects I followed Chritian&amp;rsquo;s tutorial. Today, for another project I&amp;rsquo;d have liked to follow sanjeetsuhag but found myself a little lost, so decided to create a little more detailed article, I hope he won&amp;rsquo;t mind.
On the left hand side, our project and on the right hand side hwo it would look with standard AppKit elements.</description></item><item><title>Very simple view-based NSTableView in Swift 4.2 using Model</title><link>https://kicsipixel.github.io/posts/2018/2018-11-17-nstableview_2/</link><pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2018/2018-11-17-nstableview_2/</guid><description>This tutorial is very similar to the previous one, the only difference that now, we will use a Person model, that will make you life easier.
So, the final will be the same: Step 1. Create a Cocoa Application project. Step 2. Add NSTableView to the Main Storyboard and customize a little bit Increase the number of columns from 2 to 3. Click on the header and name the columns We need to add identifier to the columns and cells.</description></item><item><title>Very simple view-based NSTableView in Swift 4.2</title><link>https://kicsipixel.github.io/posts/2018/2018-11-16-nstableview/</link><pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2018/2018-11-16-nstableview/</guid><description>It is widely known that while the internet is full with iOS tutorials you hardly find any Cocoa ones. Many things on iOS with CocoaTouch is simpler than on OS X, so it is not obvious that after reading some tutorials, you will be able code on both platform.
Iâ€™d like to share what I learn helping others and receiving advises from experienced fellows. My first application is a simple phonebook using view-based NSTableView.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>iOS on Flying blind - coding nonsense</title><link>https://kicsipixel.github.io/tags/iOS/</link><description>Recent content in iOS on Flying blind - coding nonsense</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 02 Jun 2023 12:04:31 +0200</lastBuildDate><atom:link href="https://kicsipixel.github.io/tags/iOS/index.xml" rel="self" type="application/rss+xml"/><item><title>Park API - Server side Swift with Hummingbird</title><link>https://kicsipixel.github.io/posts/2023/2023-06-02-hummingbird/</link><pubDate>Fri, 02 Jun 2023 12:04:31 +0200</pubDate><guid>https://kicsipixel.github.io/posts/2023/2023-06-02-hummingbird/</guid><description>Special thanks to Tibor BÃ¶decs for his patience and guidence during the writing of this tutorial.
Server side Swift has been available since end of 2015. The idea was behind the development that you can use the same language for RESTful APIs, desktop and mobile applications. With the evolution of the Swift language, the different Swift web frameworks got more robust and complex.
That&amp;rsquo;s why I was happy to read Tib&amp;rsquo;s excellent article about a new HTTP server library written in Swift, Hummingbird.</description></item><item><title>I tried and failed</title><link>https://kicsipixel.github.io/posts/2023/2023-05-25-lessons/</link><pubDate>Thu, 25 May 2023 22:04:31 +0200</pubDate><guid>https://kicsipixel.github.io/posts/2023/2023-05-25-lessons/</guid><description>What you learn, when your project fails I am a self-taught developer, as most of us I usually followed tutorials on YoutTube or Udemy. I started (almost) hundreds of projects and never finished any. Ok, I published an app in Mac AppStore, so not that bad&amp;hellip;
I had a bold/great/ambitious idea, I should join a real-life project, where I have deadlines and have to deliver regularly. The perfect way to improve or &amp;hellip; Here I am collecting all the lessons I learned.</description></item><item><title>Text and styles in an Xcode project</title><link>https://kicsipixel.github.io/posts/2021/2021-12-19-text-post/</link><pubDate>Sun, 19 Dec 2021 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2021/2021-12-19-text-post/</guid><description>Using ViewModifier in SwiftUI allows us to use to apply the same styles on different elements wihtout repeating ourselves (DRY). Most importantly if you need to change anything it is enough to modify it once.
Usually we write style Text in the following way:
Text(&amp;#34;Header&amp;#34;) .font(.largeTitle.bold()) .foregroundColor(Color.accentColor) If we want to apply it again, we need to retype&amp;hellip; Instead the better idea to use ViewModifier.
struct Header: ViewModifier { func body(content: Content) -&amp;gt; some View { content .</description></item><item><title>SwiftUI Preview</title><link>https://kicsipixel.github.io/posts/2021/2021-12-17-preview-post/</link><pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2021/2021-12-17-preview-post/</guid><description>Preview in SwiftUI speeds up the development process as we don&amp;rsquo;t need to build and run our application every time we make some changes. Here are some tips how I use the Preview function.
Light and dark mode side-by-side Change your code this way:
struct ContentView_Previews: PreviewProvider { static var previews: some View { Group { ContentView() .preferredColorScheme(.light) ContentView() .preferredColorScheme(.dark) } } } Focus on important part not the whole screen Add this:</description></item><item><title>Handling colors in SwiftUI easily</title><link>https://kicsipixel.github.io/posts/2021/2021-12-16-colors-post/</link><pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2021/2021-12-16-colors-post/</guid><description>Since Dark mode was introduced in iOS, the easiest was to define colors in Xcode/Assets. This way our app will change the colors automatically.
I have these three colors for my project: Define them in Assets: Using AccentColor is easy, you need to type only:
.foregroundColor(Color.accentColor) but for pastelGreen, you need to type:
.foregroundColor(Color(&amp;#34;pastelGreen&amp;#34;)) What if there is an eaier way and you can use your owned defined colors as SwiftUI built-in Color.</description></item><item><title>HelloPoly - Stanford University CS193P iPhone application development</title><link>https://kicsipixel.github.io/posts/2019/2019-11-30-hellopoly/</link><pubDate>Sat, 30 Nov 2019 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2019/2019-11-30-hellopoly/</guid><description>Nope, never attended Stanford&amp;hellip; This was a very famous iTunesU webinar in 2010 after Apple introduced iPhone SDK in 2008. I watched it several times and of course I had no clue most of topics. Then slowly I started to understand, or I thought I did untill this famous mind-term assigment came.
As far as I remember I worked on it almost a month, while the deadline was only a week or two.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Flying blind - coding nonsense</title><link>https://kicsipixel.github.io/</link><description>Recent content on Flying blind - coding nonsense</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 20 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://kicsipixel.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>PaintCode on macOS with Swift</title><link>https://kicsipixel.github.io/posts/2022/2022-03-20-paintcode-swift/</link><pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2022/2022-03-20-paintcode-swift/</guid><description>I already wrote about PaintCode in this post. I think this is one of the most usefull tool, if you want to convert complex vector graphics to Swift of ObjC code.
This time I will show you how to use PaintCode without Storyboard. I will add the Figma file and PaintCode file to GitHub repository. The code itself is very simple.
Step 1. Create a new macOS app in Xcode. Step 2.</description></item><item><title>Text and styles in an Xcode project</title><link>https://kicsipixel.github.io/posts/2021/2021-12-19-text-post/</link><pubDate>Sun, 19 Dec 2021 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2021/2021-12-19-text-post/</guid><description>Using ViewModifier in SwiftUI allows us to use to apply the same styles on different elements wihtout repeating ourselves (DRY). Most importantly if you need to change anything it is enough to modify it once.
Usually we write style Text in the following way:
Text(&amp;#34;Header&amp;#34;) .font(.largeTitle.bold()) .foregroundColor(Color.accentColor) If we want to apply it again, we need to retype&amp;hellip; Instead the better idea to use ViewModifier.
struct Header: ViewModifier { func body(content: Content) -&amp;gt; some View { content .</description></item><item><title>SwiftUI Preview</title><link>https://kicsipixel.github.io/posts/2021/2021-12-17-preview-post/</link><pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2021/2021-12-17-preview-post/</guid><description>Preview in SwiftUI speeds up the development process as we don&amp;rsquo;t need to build and run our application every time we make some changes. Here are some tips how I use the Preview function.
Light and dark mode side-by-side Change your code this way:
struct ContentView_Previews: PreviewProvider { static var previews: some View { Group { ContentView() .preferredColorScheme(.light) ContentView() .preferredColorScheme(.dark) } } } Focus on important part not the whole screen Add this:</description></item><item><title>Handling colors in SwiftUI easily</title><link>https://kicsipixel.github.io/posts/2021/2021-12-16-colors-post/</link><pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2021/2021-12-16-colors-post/</guid><description>Since Dark mode was introduced in iOS, the easiest was to define colors in Xcode/Assets. This way our app will change the colors automatically.
I have these three colors for my project: Define them in Assets: Using AccentColor is easy, you need to type only:
.foregroundColor(Color.accentColor) but for pastelGreen, you need to type:
.foregroundColor(Color(&amp;#34;pastelGreen&amp;#34;)) What if there is an eaier way and you can use your owned defined colors as SwiftUI built-in Color.</description></item><item><title>NSWindow without Storyboard but...</title><link>https://kicsipixel.github.io/posts/2020/2020-10-28-semistoryboard/</link><pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2020/2020-10-28-semistoryboard/</guid><description>Earlier this year I wrote a short blog post about creating NSWindow without Storyboard with code only. While collecting information, I read several opinions why it was a tedious job, and it could be done better&amp;hellip;
Maybe the easiest way to mix Storyboard and coding approach. As I pointed out, recreation of NSMenu is a real pain/mess. So, what about keeping Main.storyboard for NSMenu only and code the rest of the components?</description></item><item><title>Mee.TB - my first app in Mac App Store.</title><link>https://kicsipixel.github.io/posts/2020/2020-07-08-meetb/</link><pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2020/2020-07-08-meetb/</guid><description>My first side-project just released in Mac App Store. This simple macOS app is a Periodic/Mendeleev table. I wrote it in Swift without Storyboard.
During the development I understood how difficult the last 10%. When you solved all (or almost all difficulties) and simple you lost the motivation for fine-tuning or small details.
At the end I&amp;rsquo;m proud that I&amp;rsquo;m finished and didn&amp;rsquo;t give up when Apple rejected my first attempt.</description></item><item><title>KVO, KVC and Bindings</title><link>https://kicsipixel.github.io/posts/2020/2020-06-02-kvc/</link><pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2020/2020-06-02-kvc/</guid><description>The original tutorial was published in Cocoa Programming for OS X: The Big Nerd Ranch Guide in April, 2015. As far as I know this was last macOS/AppKit/Cocoa book by Aaron Hillegass, later he published only about iOS/UIKit. Although the book was written for Xcode 6.3 and Swift 1.2 it is a very interesting and useful reading in case you are interested in macOS programming.
We will create a simple Thermostat app with minimal code using KVC.</description></item><item><title>NSTableView with Cocoa Bindings</title><link>https://kicsipixel.github.io/posts/2020/2020-04-30-bindings/</link><pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2020/2020-04-30-bindings/</guid><description>I think Cocoa Bindings is a little bit controversial technology. Some people believe less code means less error, easier to debug, according to the others it is hard to read and understand, it&amp;rsquo;s black magic. During the years I tried to understand several times with very little luck. Last night I read a brilliant book by Stuart Grimshaw. I highly recommend his book, he wrote a lot of very useful concept about general programming and Swift coding as well.</description></item><item><title>NSWindow without Storyboard</title><link>https://kicsipixel.github.io/posts/2020/2020-01-11-nostoryboard/</link><pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2020/2020-01-11-nostoryboard/</guid><description>Time to time the debate restarts whether using Storyboard is the proper way of interface desing. On iPhone it is quite simple and you can find several articles or tutorials. I wanted to try it on macOS and hardly found anything up-to-date information. Hereby I share what I found, maybe it can help others.
At the end of the article I indicated all the sources I used.
Step 1. Create a new Swift project with Storyboard.</description></item><item><title>Custom NSWindow</title><link>https://kicsipixel.github.io/posts/2020/2020-01-10-customnswindow/</link><pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2020/2020-01-10-customnswindow/</guid><description>If you&amp;rsquo;re completely bored by gray-backgrounded NSWindow and wondering how to improve the UI with some colors, here we go with some helps. I highly recommend Luka Kerr&amp;rsquo;s post on Github. We will build this: Step 1. Create a project in XCode with Swift and Storyboard. Step 2. Add a new NSWindowController.swift file to the project Step 3. Connect the new custom controller with Storyboard element Step 4. Add some code to our CustomWindowController.</description></item><item><title>HelloPoly - Stanford University CS193P iPhone application development</title><link>https://kicsipixel.github.io/posts/2019/2019-11-30-hellopoly/</link><pubDate>Sat, 30 Nov 2019 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2019/2019-11-30-hellopoly/</guid><description>Nope, never attended Stanford&amp;hellip; This was a very famous iTunesU webinar in 2010 after Apple introduced iPhone SDK in 2008. I watched it several times and of course I had no clue most of topics. Then slowly I started to understand, or I thought I did untill this famous mind-term assigment came.
As far as I remember I worked on it almost a month, while the deadline was only a week or two.</description></item><item><title>Using randomuser.me for seeding DB in Rails projects</title><link>https://kicsipixel.github.io/posts/2019/2019-03-29-seed/</link><pubDate>Fri, 29 Mar 2019 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2019/2019-03-29-seed/</guid><description>I was working on a small Rails project and I needed some fake data to seed my DB. Normally, this would haven&amp;rsquo;t been a problem, but that time I needed profile pictures as well beside the first and last names. My first attempt was faker gem but couldn&amp;rsquo;t get the result I wanted, so looked around for another solution.
There is a great project, called randomuser.me. Using their API you can get random users with names, profile picutures, etc.</description></item><item><title>NSTabView controlled by NSSegmentedControl</title><link>https://kicsipixel.github.io/posts/2018/2018-11-19-nstabview/</link><pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2018/2018-11-19-nstabview/</guid><description>Recently I found two very interesting articles about NSToolbar and NSSegmentedControl. One was written by Christian Tietze and the other by sanjeetsuhag.
During creating one of my projects I followed Chritian&amp;rsquo;s tutorial. Today, for another project I&amp;rsquo;d have liked to follow sanjeetsuhag but found myself a little lost, so decided to create a little more detailed article, I hope he won&amp;rsquo;t mind.
On the left hand side, our project and on the right hand side hwo it would look with standard AppKit elements.</description></item><item><title>PaintCode, the mindblowing tool</title><link>https://kicsipixel.github.io/posts/2018/2018-11-18-paintcode/</link><pubDate>Sun, 18 Nov 2018 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2018/2018-11-18-paintcode/</guid><description>There are several fantastic tools, I will write some of them later. I would like to start with PaintCode. Drawing simple shapes (e.g. ovals, rectangles, etc) can be easy, but complex shape drawings are very tedious.
This ugly app we will build today. I would like to draw this origami bird, and add to our app in two different way.
One way is to use Custom View and draw method, while the other is Image View using image method.</description></item><item><title>Very simple view-based NSTableView in Swift 4.2 using Model</title><link>https://kicsipixel.github.io/posts/2018/2018-11-17-nstableview_2/</link><pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2018/2018-11-17-nstableview_2/</guid><description>This tutorial is very similar to the previous one, the only difference that now, we will use a Person model, that will make you life easier.
So, the final will be the same: Step 1. Create a Cocoa Application project. Step 2. Add NSTableView to the Main Storyboard and customize a little bit Increase the number of columns from 2 to 3. Click on the header and name the columns We need to add identifier to the columns and cells.</description></item><item><title>Very simple view-based NSTableView in Swift 4.2</title><link>https://kicsipixel.github.io/posts/2018/2018-11-16-nstableview/</link><pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2018/2018-11-16-nstableview/</guid><description>It is widely known that while the internet is full with iOS tutorials you hardly find any Cocoa ones. Many things on iOS with CocoaTouch is simpler than on OS X, so it is not obvious that after reading some tutorials, you will be able code on both platform.
I’d like to share what I learn helping others and receiving advises from experienced fellows. My first application is a simple phonebook using view-based NSTableView.</description></item><item><title>Hello World!</title><link>https://kicsipixel.github.io/posts/2018/2018-11-15-hello-world/</link><pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate><guid>https://kicsipixel.github.io/posts/2018/2018-11-15-hello-world/</guid><description>2018 After long time I have decided to restart writing blog about my weird coding experiences. It is weird because I explore things and happy if they work but never consider to make the code simple or efficient.
So all suggestions and comments are welcome, please feel free.
Have a nice reading, Szabolcs</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>hummingbird on Flying blind - coding nonsense</title><link>https://kicsipixel.github.io/tags/hummingbird/</link><description>Recent content in hummingbird on Flying blind - coding nonsense</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 02 Jun 2023 12:04:31 +0200</lastBuildDate><atom:link href="https://kicsipixel.github.io/tags/hummingbird/index.xml" rel="self" type="application/rss+xml"/><item><title>Park API - Server side Swift with Hummingbird</title><link>https://kicsipixel.github.io/posts/2023/2023-06-02-hummingbird/</link><pubDate>Fri, 02 Jun 2023 12:04:31 +0200</pubDate><guid>https://kicsipixel.github.io/posts/2023/2023-06-02-hummingbird/</guid><description>Server side Swift has been available since end of 2015. The idea was behind the development that you can use the same language for RESTful APIs, desktop and mobile applications. With the evolution of the Swift language, the different Swift web frameworks got more robust and complex.
That&amp;rsquo;s why I was happy to read Tib&amp;rsquo;s excellent article about a new HTTP server library written in Swift, Hummingbird. I immediately liked the concept of modularity, so decided to create a tutorial to show its simplicity.</description></item></channel></rss>
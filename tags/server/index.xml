<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Server on Flying blind - coding nonsense</title><link>https://kicsipixel.github.io/tags/server/</link><description>Recent content in Server on Flying blind - coding nonsense</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 15 Mar 2024 10:00:00 +0200</lastBuildDate><atom:link href="https://kicsipixel.github.io/tags/server/index.xml" rel="self" type="application/rss+xml"/><item><title>Install pgAdmin with PostgreSQL database using Docker</title><link>https://kicsipixel.github.io/posts/2024/2024-03-18-pgAdmin/</link><pubDate>Fri, 15 Mar 2024 10:00:00 +0200</pubDate><guid>https://kicsipixel.github.io/posts/2024/2024-03-18-pgAdmin/</guid><description>Installing PostgreSQL database using Docker is a very convenient way, you don’t need to worry about different dependencies. Several developers enjoys the advantages of pgAdmin tool.
Running pgAdmin on localhost Running these two tools with Docker Compose on local machine is very simple. You define both services in the docker-compose.yml
version: &amp;#39;3.8&amp;#39; services: db: image: postgres:16-alpine restart: always env_file: - .env.production ports: - 5432:5432 volumes: - db_data:/var/lib/postgresql/data pgadmin: image: dpage/pgadmin4 restart: always ports: - &amp;#34;8888:80&amp;#34; env_file: - .</description></item><item><title>Vapor 4 with Tailwind CSS</title><link>https://kicsipixel.github.io/posts/2024/2024-01-17-vapor_tailwind/</link><pubDate>Wed, 17 Jan 2024 12:04:31 +0200</pubDate><guid>https://kicsipixel.github.io/posts/2024/2024-01-17-vapor_tailwind/</guid><description>Usually developers prefer to segregate backend and frontend. Several frameworks allow to develop frontend and backend together, Vapor is one of them (i.e. Ruby on Rails, Django, etc).
Time to time heated debates start about the &amp;ldquo;best&amp;rdquo; method how to style your frontend. Whether writing CSS totally from scratch is the best or using CSS frameworks(i.e. Bootstrap, Foundation, Bulma).
My favourite CSS framework is TailwindCSS, as I hardly do any web development, my CSS skills are very limited.</description></item><item><title>Park API - Using PostgreSQL instead of SQLite</title><link>https://kicsipixel.github.io/posts/2023/2023-06-07-postgresql/</link><pubDate>Wed, 07 Jun 2023 12:04:31 +0200</pubDate><guid>https://kicsipixel.github.io/posts/2023/2023-06-07-postgresql/</guid><description>In the previous part of the article we built our first API server based on Swift using Hummingbird framework. That time we stored our data in SQLite database, which is perfect for rapid prototyping but for production we need something more robust.
Feather Database Component allows us to use PostgreSQL database as well. We need to make small modifications on our code.
Step 1. - Run PostgreSQL database as container I prefer to use containers if I know that the development and the production environment most probably are different.</description></item><item><title>Park API - Server side Swift with Hummingbird</title><link>https://kicsipixel.github.io/posts/2023/2023-06-02-hummingbird/</link><pubDate>Fri, 02 Jun 2023 12:04:31 +0200</pubDate><guid>https://kicsipixel.github.io/posts/2023/2023-06-02-hummingbird/</guid><description>Special thanks to Tibor Bödecs for his patience and guidence during the writing of this tutorial.
Server side Swift has been available since end of 2015. The idea was behind the development that you can use the same language for RESTful APIs, desktop and mobile applications. With the evolution of the Swift language, the different Swift web frameworks got more robust and complex.
That&amp;rsquo;s why I was happy to read Tib&amp;rsquo;s excellent article about a new HTTP server library written in Swift, Hummingbird.</description></item></channel></rss>